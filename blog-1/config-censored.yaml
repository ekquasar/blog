apiVersion: v1
data:
  relay: |
    connectors:
      spanmetrics: null
    exporters:
      debug: {}
      logging: {}
      otlp:
        endpoint: 'my-otel-demo-jaeger-collector:4317'
        tls:
          insecure: true
      otlphttp:  # ADD ME
        auth:
          authenticator: oauth2client
        traces_endpoint: https://<my endpoint>/traces
        metrics_endpoint: https://<my endpoint>/metrics
      otlphttp/prometheus:
        endpoint: http://my-otel-demo-prometheus-server:9090/api/v1/otlp
        tls:
          insecure: true
    extensions:
      oauth2client:  # ADD ME
        client_id: <my client ID>
        client_secret: <my client Secret>
        token_url: <my token URL>
      health_check: {}
      memory_ballast:
        size_in_percentage: 40
    processors:
      batch: {}
      filter/ottl:
        error_mode: ignore
        metrics:
          metric:
          - name == "rpc.server.duration"
      k8sattributes:
        extract:
          metadata:
          - k8s.namespace.name
          - k8s.deployment.name
          - k8s.statefulset.name
          - k8s.daemonset.name
          - k8s.cronjob.name
          - k8s.job.name
          - k8s.node.name
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.pod.start_time
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      resource:
        attributes:
        - action: insert
          from_attribute: k8s.pod.uid
          key: service.instance.id
      transform:
        metric_statements:
        - context: metric
          statements:
          - set(description, "") where name == "queueSize"
          - set(description, "") where name == "rpc.server.duration"
          - set(description, "") where name == "http.client.duration"
    receivers:
      jaeger:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:14250
          thrift_compact:
            endpoint: ${env:MY_POD_IP}:6831
          thrift_http:
            endpoint: ${env:MY_POD_IP}:14268
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
          http:
            cors:
              allowed_origins:
              - http://*
              - https://*
            endpoint: ${env:MY_POD_IP}:4318
      prometheus:
        config:
          scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 10s
            static_configs:
            - targets:
              - ${env:MY_POD_IP}:8888
      zipkin:
        endpoint: ${env:MY_POD_IP}:9411
    service:
      extensions:
      - health_check
      - memory_ballast
      - oauth2client  # ADD ME
      pipelines:
        logs:
          exporters:
          - debug
          processors:
          - k8sattributes
          - memory_limiter
          - batch
          receivers:
          - otlp
        metrics:
          exporters:
          - otlphttp/prometheus
          - debug
          - otlphttp  # ADD ME
          processors:
          - k8sattributes
          - memory_limiter
          - filter/ottl
          - transform
          - resource
          - batch
          receivers:
          - otlp
          - spanmetrics
        traces:
          exporters:
          - otlp
          - debug
          - spanmetrics
          - otlphttp  # ADD ME
          processors:
          - k8sattributes
          - memory_limiter
          - resource
          - batch
          receivers:
          - otlp
          - jaeger
          - zipkin
      telemetry:
        metrics:
          address: ${env:MY_POD_IP}:8888
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: my-otel-demo
    meta.helm.sh/release-namespace: default
  creationTimestamp: "2023-12-13T21:02:35Z"
  labels:
    app.kubernetes.io/instance: my-otel-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: otelcol
    app.kubernetes.io/version: 0.88.0
    helm.sh/chart: opentelemetry-collector-0.73.1
  name: my-otel-demo-otelcol
  namespace: default
  resourceVersion: "56136"
  uid: cb37633d-2733-4deb-8ba5-6979cc42b75e